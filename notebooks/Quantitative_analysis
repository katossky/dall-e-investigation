{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"images-generated-by-dalle-mini/minidalle_flickr30k_clip.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>flickr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48_1206_2.jpeg</td>\n",
       "      <td>25.037296</td>\n",
       "      <td>1206</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>995_30781_4.jpeg</td>\n",
       "      <td>23.693491</td>\n",
       "      <td>30781</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>186_5947_1.jpeg</td>\n",
       "      <td>28.058033</td>\n",
       "      <td>5947</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>211_6661_5.jpeg</td>\n",
       "      <td>27.386684</td>\n",
       "      <td>6661</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>544_17045_2.jpeg</td>\n",
       "      <td>25.031023</td>\n",
       "      <td>17045</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  1          0      2  flickr\n",
       "0    48_1206_2.jpeg  25.037296   1206       0\n",
       "1  995_30781_4.jpeg  23.693491  30781       0\n",
       "2   186_5947_1.jpeg  28.058033   5947       0\n",
       "3   211_6661_5.jpeg  27.386684   6661       0\n",
       "4  544_17045_2.jpeg  25.031023  17045       0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n",
    "#Rajouter corr√©lation pour faire des tests "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[df[\"flickr\"] ==0 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>flickr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4995.000000</td>\n",
       "      <td>4995.000000</td>\n",
       "      <td>4995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>23.271560</td>\n",
       "      <td>15435.865866</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.534966</td>\n",
       "      <td>8884.180599</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>10.398409</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20.919617</td>\n",
       "      <td>8084.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>23.196333</td>\n",
       "      <td>15650.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>25.667871</td>\n",
       "      <td>22953.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>34.615807</td>\n",
       "      <td>30943.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0             2  flickr\n",
       "count  4995.000000   4995.000000  4995.0\n",
       "mean     23.271560  15435.865866     0.0\n",
       "std       3.534966   8884.180599     0.0\n",
       "min      10.398409     25.000000     0.0\n",
       "25%      20.919617   8084.000000     0.0\n",
       "50%      23.196333  15650.000000     0.0\n",
       "75%      25.667871  22953.000000     0.0\n",
       "max      34.615807  30943.000000     0.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df[df[\"flickr\"] == 1 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>flickr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>32.359045</td>\n",
       "      <td>15435.865866</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.456052</td>\n",
       "      <td>8887.740679</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>19.232508</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.975929</td>\n",
       "      <td>8129.500000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>32.528362</td>\n",
       "      <td>15650.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>34.664547</td>\n",
       "      <td>22922.500000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>44.820663</td>\n",
       "      <td>30943.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0             2  flickr\n",
       "count  999.000000    999.000000   999.0\n",
       "mean    32.359045  15435.865866     1.0\n",
       "std      3.456052   8887.740679     0.0\n",
       "min     19.232508     25.000000     1.0\n",
       "25%     29.975929   8129.500000     1.0\n",
       "50%     32.528362  15650.000000     1.0\n",
       "75%     34.664547  22922.500000     1.0\n",
       "max     44.820663  30943.000000     1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7feae181c198>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df2[\"0\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7feae18d3470>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8GearUAAANJElEQVR4nO3df2zcdR3H8dd7bTc2fwTaLQ3ZVk+sCX8Qg3GSmBhDDIO2/IEmhkhiqCSjsoZ2sj8QzRLR1MQYp4H+gcGIdokRiRAlss6MSKL+g3Q4HGyz+8o6xoAxuiAsnVt/vP3j7uq1vfbuaO/evbvnI1lov9/bfT6ffft93rff/sDcXQCAylsTPQEAqFcEGACCEGAACEKAASAIAQaAII2lPHjjxo2eSqXKNBUAqE2HDh16x903zd9eUoBTqZRGRkZWblYAUAfM7FS+7dyCAIAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACFLS/xMOWAmDg4NKkqSiY545c0aStHnz5oqOm9Xe3q6+vr6QsbF6EWBUXJIkOvzyMU1vaK7YmA0T/5EkvXWp8h/yDRPnKz4mqgMBRojpDc26eG1XxcZbf3y/JFV0zPljA/NxDxgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEOA8BgcHNTg4GD0NAEWq1nO2MXoCq1GSJNFTAFCCaj1nuQIGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCVCTA4+Pj6u/vV5Ik6u/v1/j4+IJ9udsKPdeOHTvU1dWlJEmUJIm6urp01113qbe3d84Y4+Pj6u3t1Y4dOxbsW2qek5OTK7JuAJUzMTGhjo4O3Xzzzero6FBPT8+S53ySJOrs7FRPT89sL3bu3Kmenh7dfffds83YuXOnent7i25UKRpX/BnzGBoa0pEjRzQwMKBTp05p3759uu++++bsy91W6LmSJJEkDQwMSEr/w588eXJ2W3YMd9fRo0dn/26+8fPNs7m5WVu2bFn2ugFUzmuvvaZLly7Nvj86OrrkOT8wMKCLFy9qdHR0thfHjh1b8JixsTFJKrpRpSj7FfD4+LgOHDggd9fY2JjcXQcOHJh9xcnuy24r9Fz79++ffX9sbGz2Hyd3m7treHhYw8PDefflGyt3LufPn+cqGKgiExMTc+Kbtdg5nyTJnHY888wzC3qR/ftZw8PDK34VXPYr4KGhIc3MzMzZNj09PfuKk92X3bbUK8zQ0JCmpqaKGndyclLunndfvrFy5+nuGh0d1a5du4oaC6VJkkRrLuc/NrVozX/fU5K8z8dTGWU/K17M/HM++9lzVjFdmZycXPGr4IJXwGbWY2YjZjZy7ty5kgd49tlnFyxuampKBw8enLMvu63QcxVrsfguNtb8eRYbegDxljrfpYXn/PzPnIsdo1CjSlXwCtjdH5X0qCRt27at5MuWm266Sfv3758TtMbGRm3fvl3uPrsvu63Qcz399NNFjWtmix6UfGPNn2dLS4seeuihosZCaXbt2qVDr56NnkbFzFzxUbVf08rHUxndcssteW9BZM0/51OpVMkRNrOCjSpV2e8Bd3d3a82aucM0NDTozjvvnLMvu63QczU2FnfXpKmpSU1NTXn35Rsrdy5mptbW1qLGARCvra1tyf3zz/k9e/bM2d/Y2LhoL7KampoKNqpUZQ9wS0uLOjo6ZGZKpVIyM3V0dKilpWXOvuy2Qs/V1dU1+34qlVIqlZrzmOwYnZ2d6uzszLsv31i5c2lubi54MACsHhs2bNC6desWbF/snG9vb5/TjltvvXVBL7J/P6uzs7Ngo0pVkW9D6+7u1tjYmPr7+/Xwww/PeRXJ7iv2laW7u1tHjx7VG2+8Mfsq1t/fr9bWVq1fv167d++eM0aSJLp8+bLWrl27YN9i8+T+L1B92tradPr0ac3MzGjNmjVqa2vT/fffv+g5v2fPHvX19Wnr1q2z+0+cOKHp6Wm5u5qamrR7927t3btXZrbiV7+SZIVuXufatm2bj4yMrPgkVpvsV6u5Z1ce2XvAF6/tKvzgFbL+ePrbFys5Zu7Yn+EecFmt9nPWzA65+7b52/lRZAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIEhj9ARWo/b29ugpAChBtZ6zBDiPvr6+6CkAKEG1nrPcggCAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIAgBBoAgBBgAghBgAAhCgAEgCAEGgCAEGACCEGAACEKAASAIAQaAIAQYAIIQYAAIQoABIEhj9ARQnxomzmv98f0VHG9ckio65v/HPi+pteLjYvUjwKi49vb2io955syUJGnz5ogQtoasGasfAUbF9fX1RU8BWBW4BwwAQQgwAAQhwAAQhAADQBACDABBCDAABCHAABCEAANAEAIMAEEIMAAEIcAAEIQAA0AQAgwAQQgwAAQhwAAQhAADQBACDABBCDAABCHAABCEAANAEHP34h9sdk7SqSIeulHSOx90UlWOtdefel23xNqLXfvH3H3T/I0lBbhYZjbi7ttW/ImrAGuvv7XX67ol1r7ctXMLAgCCEGAACFKuAD9apuetBqy9/tTruiXWvixluQcMACiMWxAAEIQAA0CQZQfYzB4zs7fN7OWcbc1mdtDMTmT+e9Vyx1mNFln7g2Z2xswOZ/50Rc6xHMxsq5k9Z2ZHzewVM9uV2V7zx32JtdfDcb/CzP5uZi9l1v69zPaPm9nzZpaY2W/NbG30XFfaEmv/lZmdzDnu15f0vMu9B2xmX5B0QdI+d78us+1Hks67+w/N7AFJV7n7t5Y10Cq0yNoflHTB3X8cObdyMrOrJV3t7i+a2UckHZL0JUlfV40f9yXWfrtq/7ibpA+5+wUza5L0N0m7JO2W9JS7P25mP5P0krs/EjnXlbbE2u+R9Ed3/90Hed5lXwG7+18knZ+3+TZJQ5m3h5T+AK05i6y95rn7m+7+Yubt9yUdk7RZdXDcl1h7zfO0C5l3mzJ/XNIXJWUDVKvHfbG1L0u57gG3uvubmbffktRapnFWq3vN7J+ZWxQ192l4LjNLSfq0pOdVZ8d93tqlOjjuZtZgZoclvS3poKR/S3rX3acyD3ldNfqCNH/t7p497j/IHPefmtm6Up6z7F+E8/Q9jnr6XrdHJH1C0vWS3pS0N3Y65WNmH5b0pKRvuvt7uftq/bjnWXtdHHd3n3b36yVtkXSDpGuDp1Qx89duZtdJ+rbS/wafldQsqaRbbuUK8NnMvbLsPbO3yzTOquPuZzMHakbSz5X+IK05mftgT0r6tbs/ldlcF8c939rr5bhnufu7kp6T9DlJV5pZY2bXFklnwiZWATlr78jcknJ3vyTplyrxuJcrwE9L6s683S3pD2UaZ9XJBijjy5JeXuyx1SrzBYlfSDrm7j/J2VXzx32xtdfJcd9kZldm3l4vabvS98Cfk/SVzMNq9bjnW/vxnAsOU/red0nHfSW+C+I3km5U+leznZX0XUm/l/SEpDalf33l7e5ec1+sWmTtNyr9aahLGpP0jZz7ojXBzD4v6a+SjkiayWz+jtL3Qmv6uC+x9jtU+8f9U0p/ka1B6Yu3J9z9+2Z2jaTHlf4U/B+Svpa5IqwZS6z9z5I2STJJhyXdk/PFusLPy48iA0AMfhIOAIIQYAAIQoABIAgBBoAgBBgAghBgVD0z6zCzf2V+G9cD0fMBisW3oaGqmVmDpFGlvzH+dUkvSLrD3Y+GTgwoAlfAqHY3SErc/VV3v6z0DwTcFjwnoCgEGNVus6TTOe/X7G/jQu0hwAAQhACj2p2RtDXn/Zr/bVyoHQQY1e4FSZ/M/H/J1kr6qtK/lQ1Y9RoLPwRYvdx9yszulfQnpX9T1WPu/krwtICi8G1oABCEWxAAEIQAA0AQAgwAQQgwAAQhwAAQhAADQBACDABB/gcle5Xl1T7piAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df1[\"0\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "array = np.asarray(df[\"2\"])\n",
    "array = np.sort(array)\n",
    "values =[array[6*i] for i in range(len(array)//6)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[25,\n",
       " 34,\n",
       " 51,\n",
       " 89,\n",
       " 97,\n",
       " 124,\n",
       " 133,\n",
       " 134,\n",
       " 137,\n",
       " 199,\n",
       " 219,\n",
       " 222,\n",
       " 228,\n",
       " 246,\n",
       " 259,\n",
       " 279,\n",
       " 304,\n",
       " 318,\n",
       " 340,\n",
       " 395,\n",
       " 434,\n",
       " 472,\n",
       " 487,\n",
       " 520,\n",
       " 539,\n",
       " 565,\n",
       " 615,\n",
       " 654,\n",
       " 661,\n",
       " 670,\n",
       " 734,\n",
       " 748,\n",
       " 754,\n",
       " 760,\n",
       " 828,\n",
       " 856,\n",
       " 887,\n",
       " 906,\n",
       " 917,\n",
       " 972,\n",
       " 973,\n",
       " 1023,\n",
       " 1030,\n",
       " 1044,\n",
       " 1072,\n",
       " 1117,\n",
       " 1196,\n",
       " 1202,\n",
       " 1206,\n",
       " 1284,\n",
       " 1305,\n",
       " 1306,\n",
       " 1310,\n",
       " 1343,\n",
       " 1358,\n",
       " 1390,\n",
       " 1401,\n",
       " 1417,\n",
       " 1480,\n",
       " 1576,\n",
       " 1594,\n",
       " 1610,\n",
       " 1646,\n",
       " 1723,\n",
       " 1771,\n",
       " 1821,\n",
       " 1833,\n",
       " 1895,\n",
       " 1981,\n",
       " 1983,\n",
       " 1984,\n",
       " 1987,\n",
       " 2044,\n",
       " 2054,\n",
       " 2103,\n",
       " 2112,\n",
       " 2113,\n",
       " 2124,\n",
       " 2130,\n",
       " 2131,\n",
       " 2139,\n",
       " 2161,\n",
       " 2180,\n",
       " 2197,\n",
       " 2260,\n",
       " 2265,\n",
       " 2319,\n",
       " 2330,\n",
       " 2410,\n",
       " 2412,\n",
       " 2429,\n",
       " 2433,\n",
       " 2458,\n",
       " 2523,\n",
       " 2551,\n",
       " 2572,\n",
       " 2600,\n",
       " 2615,\n",
       " 2678,\n",
       " 2690,\n",
       " 2788,\n",
       " 2803,\n",
       " 2848,\n",
       " 2851,\n",
       " 2906,\n",
       " 2909,\n",
       " 2955,\n",
       " 2956,\n",
       " 3008,\n",
       " 3078,\n",
       " 3082,\n",
       " 3087,\n",
       " 3097,\n",
       " 3109,\n",
       " 3130,\n",
       " 3162,\n",
       " 3245,\n",
       " 3412,\n",
       " 3437,\n",
       " 3451,\n",
       " 3459,\n",
       " 3476,\n",
       " 3500,\n",
       " 3539,\n",
       " 3648,\n",
       " 3701,\n",
       " 3703,\n",
       " 3724,\n",
       " 3771,\n",
       " 3774,\n",
       " 3826,\n",
       " 3834,\n",
       " 3951,\n",
       " 3972,\n",
       " 4007,\n",
       " 4027,\n",
       " 4028,\n",
       " 4041,\n",
       " 4313,\n",
       " 4317,\n",
       " 4343,\n",
       " 4367,\n",
       " 4402,\n",
       " 4452,\n",
       " 4501,\n",
       " 4510,\n",
       " 4556,\n",
       " 4562,\n",
       " 4663,\n",
       " 4686,\n",
       " 4748,\n",
       " 4801,\n",
       " 4816,\n",
       " 4879,\n",
       " 4881,\n",
       " 4882,\n",
       " 4902,\n",
       " 4942,\n",
       " 4981,\n",
       " 5016,\n",
       " 5056,\n",
       " 5160,\n",
       " 5171,\n",
       " 5240,\n",
       " 5261,\n",
       " 5327,\n",
       " 5330,\n",
       " 5343,\n",
       " 5441,\n",
       " 5541,\n",
       " 5580,\n",
       " 5581,\n",
       " 5595,\n",
       " 5618,\n",
       " 5621,\n",
       " 5701,\n",
       " 5724,\n",
       " 5743,\n",
       " 5760,\n",
       " 5763,\n",
       " 5767,\n",
       " 5807,\n",
       " 5835,\n",
       " 5854,\n",
       " 5867,\n",
       " 5881,\n",
       " 5947,\n",
       " 5964,\n",
       " 5970,\n",
       " 5989,\n",
       " 6002,\n",
       " 6005,\n",
       " 6008,\n",
       " 6031,\n",
       " 6067,\n",
       " 6068,\n",
       " 6078,\n",
       " 6127,\n",
       " 6192,\n",
       " 6242,\n",
       " 6250,\n",
       " 6258,\n",
       " 6283,\n",
       " 6300,\n",
       " 6306,\n",
       " 6334,\n",
       " 6376,\n",
       " 6486,\n",
       " 6532,\n",
       " 6549,\n",
       " 6645,\n",
       " 6661,\n",
       " 6694,\n",
       " 6733,\n",
       " 6781,\n",
       " 6796,\n",
       " 6830,\n",
       " 6921,\n",
       " 7153,\n",
       " 7170,\n",
       " 7263,\n",
       " 7492,\n",
       " 7507,\n",
       " 7542,\n",
       " 7549,\n",
       " 7581,\n",
       " 7584,\n",
       " 7597,\n",
       " 7631,\n",
       " 7639,\n",
       " 7682,\n",
       " 7702,\n",
       " 7739,\n",
       " 7750,\n",
       " 7791,\n",
       " 7874,\n",
       " 7881,\n",
       " 7909,\n",
       " 7912,\n",
       " 7921,\n",
       " 7962,\n",
       " 7973,\n",
       " 7986,\n",
       " 7996,\n",
       " 8015,\n",
       " 8023,\n",
       " 8054,\n",
       " 8070,\n",
       " 8079,\n",
       " 8084,\n",
       " 8175,\n",
       " 8185,\n",
       " 8199,\n",
       " 8225,\n",
       " 8267,\n",
       " 8274,\n",
       " 8280,\n",
       " 8322,\n",
       " 8337,\n",
       " 8362,\n",
       " 8364,\n",
       " 8412,\n",
       " 8427,\n",
       " 8486,\n",
       " 8519,\n",
       " 8528,\n",
       " 8554,\n",
       " 8561,\n",
       " 8611,\n",
       " 8631,\n",
       " 8654,\n",
       " 8674,\n",
       " 8708,\n",
       " 8740,\n",
       " 8766,\n",
       " 8776,\n",
       " 8811,\n",
       " 8831,\n",
       " 8870,\n",
       " 8872,\n",
       " 8903,\n",
       " 8940,\n",
       " 8982,\n",
       " 8993,\n",
       " 9013,\n",
       " 9039,\n",
       " 9042,\n",
       " 9058,\n",
       " 9065,\n",
       " 9074,\n",
       " 9088,\n",
       " 9223,\n",
       " 9241,\n",
       " 9242,\n",
       " 9266,\n",
       " 9274,\n",
       " 9285,\n",
       " 9308,\n",
       " 9323,\n",
       " 9328,\n",
       " 9342,\n",
       " 9354,\n",
       " 9492,\n",
       " 9502,\n",
       " 9506,\n",
       " 9519,\n",
       " 9531,\n",
       " 9572,\n",
       " 9579,\n",
       " 9592,\n",
       " 9598,\n",
       " 9609,\n",
       " 9673,\n",
       " 9736,\n",
       " 9776,\n",
       " 9797,\n",
       " 9803,\n",
       " 9885,\n",
       " 9888,\n",
       " 9908,\n",
       " 9911,\n",
       " 9959,\n",
       " 9978,\n",
       " 9979,\n",
       " 10005,\n",
       " 10010,\n",
       " 10088,\n",
       " 10097,\n",
       " 10106,\n",
       " 10124,\n",
       " 10171,\n",
       " 10235,\n",
       " 10239,\n",
       " 10242,\n",
       " 10287,\n",
       " 10330,\n",
       " 10376,\n",
       " 10379,\n",
       " 10390,\n",
       " 10469,\n",
       " 10490,\n",
       " 10499,\n",
       " 10575,\n",
       " 10577,\n",
       " 10620,\n",
       " 10629,\n",
       " 10663,\n",
       " 10666,\n",
       " 10691,\n",
       " 10692,\n",
       " 10693,\n",
       " 10732,\n",
       " 10788,\n",
       " 10858,\n",
       " 10920,\n",
       " 10925,\n",
       " 11086,\n",
       " 11124,\n",
       " 11137,\n",
       " 11152,\n",
       " 11207,\n",
       " 11219,\n",
       " 11234,\n",
       " 11239,\n",
       " 11278,\n",
       " 11283,\n",
       " 11363,\n",
       " 11374,\n",
       " 11400,\n",
       " 11423,\n",
       " 11466,\n",
       " 11514,\n",
       " 11516,\n",
       " 11618,\n",
       " 11624,\n",
       " 11656,\n",
       " 11747,\n",
       " 11890,\n",
       " 11897,\n",
       " 11906,\n",
       " 11914,\n",
       " 11939,\n",
       " 11963,\n",
       " 11979,\n",
       " 12030,\n",
       " 12053,\n",
       " 12058,\n",
       " 12077,\n",
       " 12084,\n",
       " 12133,\n",
       " 12178,\n",
       " 12184,\n",
       " 12212,\n",
       " 12245,\n",
       " 12293,\n",
       " 12305,\n",
       " 12334,\n",
       " 12356,\n",
       " 12366,\n",
       " 12375,\n",
       " 12402,\n",
       " 12417,\n",
       " 12427,\n",
       " 12441,\n",
       " 12475,\n",
       " 12486,\n",
       " 12508,\n",
       " 12542,\n",
       " 12706,\n",
       " 12757,\n",
       " 12782,\n",
       " 12813,\n",
       " 12853,\n",
       " 12865,\n",
       " 12902,\n",
       " 12927,\n",
       " 12947,\n",
       " 12949,\n",
       " 12969,\n",
       " 12994,\n",
       " 13085,\n",
       " 13135,\n",
       " 13170,\n",
       " 13197,\n",
       " 13276,\n",
       " 13302,\n",
       " 13388,\n",
       " 13417,\n",
       " 13516,\n",
       " 13543,\n",
       " 13566,\n",
       " 13580,\n",
       " 13629,\n",
       " 13648,\n",
       " 13650,\n",
       " 13724,\n",
       " 13744,\n",
       " 13770,\n",
       " 13785,\n",
       " 13837,\n",
       " 13916,\n",
       " 13977,\n",
       " 13990,\n",
       " 13992,\n",
       " 14042,\n",
       " 14048,\n",
       " 14072,\n",
       " 14117,\n",
       " 14134,\n",
       " 14164,\n",
       " 14221,\n",
       " 14231,\n",
       " 14260,\n",
       " 14316,\n",
       " 14332,\n",
       " 14333,\n",
       " 14337,\n",
       " 14434,\n",
       " 14453,\n",
       " 14479,\n",
       " 14490,\n",
       " 14495,\n",
       " 14558,\n",
       " 14570,\n",
       " 14582,\n",
       " 14596,\n",
       " 14599,\n",
       " 14626,\n",
       " 14690,\n",
       " 14721,\n",
       " 14736,\n",
       " 14773,\n",
       " 14786,\n",
       " 14796,\n",
       " 14832,\n",
       " 14841,\n",
       " 14941,\n",
       " 14974,\n",
       " 14989,\n",
       " 15004,\n",
       " 15020,\n",
       " 15047,\n",
       " 15061,\n",
       " 15067,\n",
       " 15077,\n",
       " 15138,\n",
       " 15176,\n",
       " 15186,\n",
       " 15219,\n",
       " 15309,\n",
       " 15358,\n",
       " 15374,\n",
       " 15410,\n",
       " 15412,\n",
       " 15448,\n",
       " 15457,\n",
       " 15556,\n",
       " 15588,\n",
       " 15592,\n",
       " 15650,\n",
       " 15674,\n",
       " 15759,\n",
       " 15774,\n",
       " 15792,\n",
       " 15809,\n",
       " 15834,\n",
       " 15875,\n",
       " 15878,\n",
       " 15974,\n",
       " 16004,\n",
       " 16010,\n",
       " 16018,\n",
       " 16048,\n",
       " 16049,\n",
       " 16063,\n",
       " 16070,\n",
       " 16090,\n",
       " 16124,\n",
       " 16191,\n",
       " 16199,\n",
       " 16347,\n",
       " 16381,\n",
       " 16395,\n",
       " 16416,\n",
       " 16421,\n",
       " 16455,\n",
       " 16458,\n",
       " 16532,\n",
       " 16600,\n",
       " 16631,\n",
       " 16638,\n",
       " 16715,\n",
       " 16739,\n",
       " 16773,\n",
       " 16810,\n",
       " 16871,\n",
       " 16880,\n",
       " 16888,\n",
       " 16938,\n",
       " 16989,\n",
       " 16992,\n",
       " 16996,\n",
       " 17031,\n",
       " 17037,\n",
       " 17045,\n",
       " 17057,\n",
       " 17071,\n",
       " 17109,\n",
       " 17121,\n",
       " 17177,\n",
       " 17194,\n",
       " 17202,\n",
       " 17208,\n",
       " 17250,\n",
       " 17338,\n",
       " 17346,\n",
       " 17347,\n",
       " 17376,\n",
       " 17468,\n",
       " 17483,\n",
       " 17497,\n",
       " 17510,\n",
       " 17533,\n",
       " 17573,\n",
       " 17603,\n",
       " 17615,\n",
       " 17630,\n",
       " 17652,\n",
       " 17655,\n",
       " 17661,\n",
       " 17669,\n",
       " 17673,\n",
       " 17708,\n",
       " 17714,\n",
       " 17731,\n",
       " 17733,\n",
       " 17750,\n",
       " 17772,\n",
       " 17822,\n",
       " 17823,\n",
       " 17903,\n",
       " 17933,\n",
       " 17940,\n",
       " 17945,\n",
       " 17963,\n",
       " 17978,\n",
       " 17983,\n",
       " 17997,\n",
       " 18028,\n",
       " 18061,\n",
       " 18146,\n",
       " 18155,\n",
       " 18250,\n",
       " 18310,\n",
       " 18318,\n",
       " 18418,\n",
       " 18419,\n",
       " 18425,\n",
       " 18426,\n",
       " 18448,\n",
       " 18499,\n",
       " 18532,\n",
       " 18584,\n",
       " 18666,\n",
       " 18723,\n",
       " 18731,\n",
       " 18764,\n",
       " 18820,\n",
       " 18979,\n",
       " 18994,\n",
       " 18998,\n",
       " 19005,\n",
       " 19027,\n",
       " 19037,\n",
       " 19071,\n",
       " 19075,\n",
       " 19122,\n",
       " 19162,\n",
       " 19174,\n",
       " 19247,\n",
       " 19263,\n",
       " 19277,\n",
       " 19348,\n",
       " 19354,\n",
       " 19356,\n",
       " 19373,\n",
       " 19384,\n",
       " 19435,\n",
       " 19471,\n",
       " 19478,\n",
       " 19508,\n",
       " 19523,\n",
       " 19545,\n",
       " 19555,\n",
       " 19609,\n",
       " 19624,\n",
       " 19639,\n",
       " 19643,\n",
       " 19724,\n",
       " 19738,\n",
       " 19772,\n",
       " 19830,\n",
       " 19834,\n",
       " 19838,\n",
       " 19857,\n",
       " 19867,\n",
       " 19896,\n",
       " 19910,\n",
       " 19929,\n",
       " 20005,\n",
       " 20016,\n",
       " 20071,\n",
       " 20103,\n",
       " 20139,\n",
       " 20154,\n",
       " 20229,\n",
       " 20240,\n",
       " 20248,\n",
       " 20297,\n",
       " 20302,\n",
       " 20390,\n",
       " 20448,\n",
       " 20457,\n",
       " 20459,\n",
       " 20507,\n",
       " 20562,\n",
       " 20592,\n",
       " 20640,\n",
       " 20656,\n",
       " 20682,\n",
       " 20709,\n",
       " 20740,\n",
       " 20821,\n",
       " 20832,\n",
       " 20858,\n",
       " 20891,\n",
       " 20898,\n",
       " 20932,\n",
       " 20934,\n",
       " 20946,\n",
       " 20981,\n",
       " 21067,\n",
       " 21105,\n",
       " 21121,\n",
       " 21127,\n",
       " 21187,\n",
       " 21219,\n",
       " 21222,\n",
       " 21301,\n",
       " 21335,\n",
       " 21381,\n",
       " 21423,\n",
       " 21498,\n",
       " 21510,\n",
       " 21530,\n",
       " 21544,\n",
       " 21580,\n",
       " 21597,\n",
       " 21635,\n",
       " 21696,\n",
       " 21725,\n",
       " 21764,\n",
       " 21778,\n",
       " 21799,\n",
       " 21900,\n",
       " 21996,\n",
       " 22042,\n",
       " 22067,\n",
       " 22078,\n",
       " 22098,\n",
       " 22115,\n",
       " 22118,\n",
       " 22145,\n",
       " 22163,\n",
       " 22193,\n",
       " 22223,\n",
       " 22254,\n",
       " 22258,\n",
       " 22317,\n",
       " 22327,\n",
       " 22334,\n",
       " 22339,\n",
       " 22341,\n",
       " 22383,\n",
       " 22387,\n",
       " 22389,\n",
       " 22419,\n",
       " 22425,\n",
       " 22440,\n",
       " 22476,\n",
       " 22478,\n",
       " 22548,\n",
       " 22554,\n",
       " 22594,\n",
       " 22613,\n",
       " 22651,\n",
       " 22678,\n",
       " 22751,\n",
       " 22755,\n",
       " 22776,\n",
       " 22778,\n",
       " 22788,\n",
       " 22835,\n",
       " 22847,\n",
       " 22860,\n",
       " 22865,\n",
       " 22870,\n",
       " 22886,\n",
       " 22892,\n",
       " 22953,\n",
       " 22956,\n",
       " 22968,\n",
       " 22994,\n",
       " 22998,\n",
       " 23006,\n",
       " 23065,\n",
       " 23070,\n",
       " 23091,\n",
       " 23098,\n",
       " 23099,\n",
       " 23107,\n",
       " 23115,\n",
       " 23128,\n",
       " 23144,\n",
       " 23164,\n",
       " 23205,\n",
       " 23240,\n",
       " 23252,\n",
       " 23280,\n",
       " 23345,\n",
       " 23346,\n",
       " 23351,\n",
       " 23502,\n",
       " 23509,\n",
       " 23560,\n",
       " 23617,\n",
       " 23686,\n",
       " 23713,\n",
       " 23724,\n",
       " 23756,\n",
       " 23758,\n",
       " 23827,\n",
       " 23850,\n",
       " 23863,\n",
       " 23957,\n",
       " 23965,\n",
       " 23986,\n",
       " 24043,\n",
       " 24071,\n",
       " 24095,\n",
       " 24145,\n",
       " 24169,\n",
       " 24181,\n",
       " 24244,\n",
       " 24271,\n",
       " 24277,\n",
       " 24315,\n",
       " 24327,\n",
       " 24350,\n",
       " 24425,\n",
       " 24457,\n",
       " 24476,\n",
       " 24495,\n",
       " 24517,\n",
       " 24521,\n",
       " 24535,\n",
       " 24545,\n",
       " 24624,\n",
       " 24777,\n",
       " 24806,\n",
       " 24829,\n",
       " 24836,\n",
       " 24846,\n",
       " 24863,\n",
       " 24974,\n",
       " 25058,\n",
       " 25069,\n",
       " 25133,\n",
       " 25149,\n",
       " 25188,\n",
       " 25235,\n",
       " 25315,\n",
       " 25316,\n",
       " 25376,\n",
       " 25456,\n",
       " 25470,\n",
       " 25479,\n",
       " 25494,\n",
       " 25516,\n",
       " 25525,\n",
       " 25541,\n",
       " 25554,\n",
       " 25583,\n",
       " 25626,\n",
       " 25637,\n",
       " 25753,\n",
       " 25763,\n",
       " 25776,\n",
       " 25795,\n",
       " 25819,\n",
       " 25820,\n",
       " 25918,\n",
       " 25952,\n",
       " 25986,\n",
       " 25987,\n",
       " 26015,\n",
       " 26039,\n",
       " 26049,\n",
       " 26050,\n",
       " 26084,\n",
       " 26094,\n",
       " 26133,\n",
       " 26142,\n",
       " 26160,\n",
       " 26256,\n",
       " 26352,\n",
       " 26366,\n",
       " 26370,\n",
       " 26377,\n",
       " 26393,\n",
       " 26407,\n",
       " 26411,\n",
       " 26419,\n",
       " 26440,\n",
       " 26446,\n",
       " 26512,\n",
       " 26536,\n",
       " 26598,\n",
       " 26615,\n",
       " 26618,\n",
       " 26645,\n",
       " 26682,\n",
       " 26697,\n",
       " 26806,\n",
       " 26843,\n",
       " 26846,\n",
       " 26906,\n",
       " 26922,\n",
       " 26946,\n",
       " 26969,\n",
       " 26982,\n",
       " 26984,\n",
       " 26998,\n",
       " 27025,\n",
       " 27048,\n",
       " 27168,\n",
       " 27238,\n",
       " 27240,\n",
       " 27250,\n",
       " 27303,\n",
       " 27321,\n",
       " 27391,\n",
       " 27457,\n",
       " 27495,\n",
       " 27636,\n",
       " 27671,\n",
       " 27682,\n",
       " 27726,\n",
       " 27733,\n",
       " 27804,\n",
       " 27817,\n",
       " 27830,\n",
       " 27863,\n",
       " 27872,\n",
       " 27988,\n",
       " 28005,\n",
       " 28026,\n",
       " 28041,\n",
       " 28042,\n",
       " 28057,\n",
       " 28063,\n",
       " 28066,\n",
       " 28067,\n",
       " 28068,\n",
       " 28113,\n",
       " 28123,\n",
       " 28139,\n",
       " 28142,\n",
       " 28240,\n",
       " 28246,\n",
       " 28328,\n",
       " 28389,\n",
       " 28470,\n",
       " 28480,\n",
       " 28570,\n",
       " 28582,\n",
       " 28605,\n",
       " 28661,\n",
       " 28662,\n",
       " 28694,\n",
       " 28767,\n",
       " 28819,\n",
       " 28827,\n",
       " 28873,\n",
       " 28879,\n",
       " 28885,\n",
       " 28893,\n",
       " 28923,\n",
       " 28955,\n",
       " 28966,\n",
       " 28978,\n",
       " 29010,\n",
       " 29043,\n",
       " 29084,\n",
       " 29087,\n",
       " 29108,\n",
       " 29177,\n",
       " 29185,\n",
       " 29197,\n",
       " 29250,\n",
       " 29301,\n",
       " 29323,\n",
       " 29352,\n",
       " 29354,\n",
       " 29357,\n",
       " 29364,\n",
       " 29380,\n",
       " 29424,\n",
       " 29480,\n",
       " 29489,\n",
       " 29508,\n",
       " 29608,\n",
       " 29629,\n",
       " 29632,\n",
       " 29636,\n",
       " 29754,\n",
       " 29772,\n",
       " 29791,\n",
       " 29830,\n",
       " 29862,\n",
       " 29916,\n",
       " 29944,\n",
       " 29952,\n",
       " 30065,\n",
       " 30105,\n",
       " 30111,\n",
       " 30201,\n",
       " 30236,\n",
       " 30283,\n",
       " 30285,\n",
       " 30384,\n",
       " 30456,\n",
       " 30480,\n",
       " 30494,\n",
       " 30503,\n",
       " 30542,\n",
       " 30549,\n",
       " 30557,\n",
       " 30619,\n",
       " 30652,\n",
       " 30660,\n",
       " 30664,\n",
       " 30665,\n",
       " 30674,\n",
       " 30781,\n",
       " 30843,\n",
       " 30893,\n",
       " 30942,\n",
       " 30943]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[]\n",
    "b =[]\n",
    "for i in values :\n",
    "    dfi = df[df[\"2\"] == i ]\n",
    "    a.append(dfi[dfi[\"flickr\"] == 1][\"0\"] - dfi[dfi[\"flickr\"] == 0][\"0\"].mean())\n",
    "    b.append(i)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "array_diff = np.asarray(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.087485314942931 3.8544166721780386\n"
     ]
    }
   ],
   "source": [
    "print(array_diff.mean(),array_diff.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "same_score_index = []\n",
    "big_error_index = []\n",
    "actually_better_index = []\n",
    "for i in range(len(a)):\n",
    "    if (a[i] > -2).bool() and (a[i] < 2).bool() :\n",
    "        same_score_index.append(i)\n",
    "        \n",
    "    if (a[i] > 2).bool() : \n",
    "        big_error_index.append(i)\n",
    "    if (a[i] < -2).bool() :\n",
    "        actually_better_index.append(i)\n",
    "        \n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(same_score_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "797"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(big_error_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(actually_better_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1044\n",
      "2909\n",
      "2955\n",
      "5947\n",
      "9959\n",
      "9979\n",
      "10171\n",
      "10242\n",
      "12133\n",
      "12508\n",
      "15138\n",
      "15309\n",
      "15875\n",
      "16018\n",
      "16600\n",
      "16773\n",
      "16996\n",
      "17346\n",
      "17669\n",
      "17708\n",
      "18418\n",
      "18998\n",
      "20946\n",
      "21778\n",
      "22078\n",
      "22115\n",
      "22258\n",
      "22755\n",
      "24425\n",
      "24545\n",
      "25149\n",
      "25235\n",
      "25316\n",
      "28068\n",
      "28879\n",
      "29010\n",
      "29357\n"
     ]
    }
   ],
   "source": [
    "for i in actually_better_index:\n",
    "    print(b[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>flickr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1880</th>\n",
       "      <td>702_21778_5.jpeg</td>\n",
       "      <td>26.534506</td>\n",
       "      <td>21778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2070</th>\n",
       "      <td>4707189762.jpg</td>\n",
       "      <td>31.727539</td>\n",
       "      <td>21778</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2608</th>\n",
       "      <td>702_21778_1.jpeg</td>\n",
       "      <td>28.705889</td>\n",
       "      <td>21778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2654</th>\n",
       "      <td>702_21778_0.jpeg</td>\n",
       "      <td>33.796047</td>\n",
       "      <td>21778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3356</th>\n",
       "      <td>702_21778_2.jpeg</td>\n",
       "      <td>25.591358</td>\n",
       "      <td>21778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5084</th>\n",
       "      <td>702_21778_4.jpeg</td>\n",
       "      <td>25.596483</td>\n",
       "      <td>21778</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     1          0      2  flickr\n",
       "1880  702_21778_5.jpeg  26.534506  21778       0\n",
       "2070    4707189762.jpg  31.727539  21778       1\n",
       "2608  702_21778_1.jpeg  28.705889  21778       0\n",
       "2654  702_21778_0.jpeg  33.796047  21778       0\n",
       "3356  702_21778_2.jpeg  25.591358  21778       0\n",
       "5084  702_21778_4.jpeg  25.596483  21778       0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"2\"]==21778]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "im = Image.open(r\"flickr30k-images/4707189762.jpg\")\n",
    "im.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "im_dalle = Image.open(r\"images-generated-by-dalle-mini/images/flickr30k/702_21778_0.jpeg\")\n",
    "im_dalle.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "better_index = []\n",
    "for i in range(len(a)):\n",
    "  \n",
    "    if (a[i] < 0).bool() :\n",
    "        better_index.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(better_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
